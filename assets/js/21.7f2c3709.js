(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{360:function(e,t,r){"use strict";r.r(t);var s=r(7),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"the-ethereum-rpc-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-ethereum-rpc-api"}},[e._v("#")]),e._v(" The Ethereum RPC API")]),e._v(" "),r("p",[e._v("MetaMask uses the "),r("code",[e._v("ethereum.sendAsync()")]),e._v(" (and soon, "),r("code",[e._v("ethereum.send()")]),e._v(") API to wrap an RPC API which is based on an interface exposed by all Ethereum clients, with some extra methods that are provided by MetaMask, as a key-holding signer. You can look up how to pass these methods to the "),r("code",[e._v("window.ethereum")]),e._v(" object "),r("a",{attrs:{href:"./Ethereum-Provider"}},[e._v("here")]),e._v(".")]),e._v(" "),r("p",[e._v("This document is a cross-post of "),r("a",{attrs:{href:"https://github.com/ethereum/EIPs/pull/1474/",target:"_blank",rel:"noopener noreferrer"}},[e._v("EIP 1474"),r("OutboundLink")],1),e._v(", which aims to standardize the declaration of this interface.")]),e._v(" "),r("p",[e._v("For the full API, please see "),r("a",{attrs:{href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1474.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("EIP 1474"),r("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=a.exports}}]);